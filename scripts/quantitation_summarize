#!python

# Load libraries
import sys
import getopt
import time
import cPickle
import bz2
import gzip
import contextlib

import h5py
import numpy as np
import yaml

import quantitation
from quantitation import estimands

# Define constants

HELP = '''
Usage: quantitation_summarize [options] CONFIG [CONFIG]

Summarize results from parallel MCMC sampler for absolute quantitation from
LC/MSMS data. This should be run only after obtaining combined MCMC output. This
requires running quantitation_combine_results if quantitation_mcmc_parallel was
used to perform sampling.

Reads MCMC output from the path specified in each CONFIG for combined output.

Writes MCMC summaries to path specified in each CONFIG file for summarized
results.

Options:
  -h, --help            Show this help message and exit
  --time                Time summarization process; writes timing information to
                        stderr

Details of the required format for the YAML CONFIG files can be found it further
documentation.
'''

TIMING_MSG = '''
%s
--------------------------------------------------------------------------------
Summarization process used %f seconds.
'''

def main(argv):
    '''
    Main function for option-parsing and startup.
    
    Takes sys.argv[1:] as input.
    '''
    # Set default values for options
    timing = False
    
    # Parse arguments and options
    opts, args = getopt.getopt(argv, "h",
                               ["help", "time"])
    for option, value in opts:
        if option in ('-h', "--help"):
            print >> sys.stderr, HELP
            sys.exit(2)
        elif option=='--time':
            timing = True
        else:
            print >> sys.stderr, "Error -- unknown option %s" % option
            sys.exit(1)

    if len(args) > 0:
        cfg_paths = args
    else:
        print >> sys.stderr, "Error -- need path to YAML configuration"
        sys.exit(1)

    # Iterate over configuration files
    for cfg_path in cfg_paths:
        # Parse YAML configuration
        cfg_file = open(cfg_path, 'rb')
        cfg = yaml.load(cfg_file)
        cfg_file.close()

        # Determine type of compression used
        compress = cfg['output']['compress']

        # Check for validity of compression
        if compress not in (None, 'gzip', 'lzf', 'szip'):
            raise ValueError('Invalid value for compress.')

        # Determine which intervals to compute
        try:
            intervals = cfg['summaries']['intervals']
        except:
            intervals = [0.95]
            print >> sys.stderr, \
                    'Interval specification not found. Defaulting to 95%'

        # Start timing, if requested
        if timing:
            time_start = time.time()

        # Load combined results
        path_results = cfg['output']['path_results_combined']
        results = h5py.File(path_results, 'r')

        draws_input = results['draws']
        
        if (cfg['settings']['burn_in'] is not None and
            cfg['settings']['burn_in']>0):
            # Eliminate burn-in, if requested
            draws = {}
            for k in draws_input.keys():
                draws[k] = draws_input[k][cfg['settings']['burn_in']:]
        else:
            draws = draws_input

        n_draws = cfg['settings']['n_iterations'] - cfg['settings']['burn_in']

        # Compute proportion of concentration estimand
        if u'concentration' in draws:
            draws['concentration_estimand'] = \
                estimands.proportion_of_concentration(draws['concentration'])
        else:
            draws['concentration_estimand'] = \
                estimands.proportion_of_concentration(draws['mu'])

        # Summarize results
        effective_sample_sizes = quantitation.effective_sample_sizes(**draws)
        means = quantitation.posterior_means(**draws)
        variances = quantitation.posterior_variances(**draws)
        stderrors = quantitation.posterior_stderrors(**draws)
        medians = quantitation.posterior_medians(**draws)

        hpd_intervals = {}
        quantile_intervals = {}
        for p in intervals:
            hpd_intervals[str(p)] = quantitation.hpd_intervals(
                prob=p, **draws)
            quantile_intervals[str(p)] = quantitation.quantile_intervals(
                prob=p, **draws)

        modes = quantitation.hpd_intervals(prob=n_draws**(-0.25), **draws)
        for k, v in modes.iteritems():
            modes[k] = np.mean(v, 1)

        # Write combined results to file with appropriate compression
        path_summaries = cfg['output']['path_summaries']
        quantitation.write_to_hdf5(
            fname=path_summaries, compress=compress,
            effective_sample_sizes=effective_sample_sizes, means=means,
            variances=variances, stderror=stderrors,
            medians=medians, hpd_intervals=hpd_intervals,
            quantile_intervals=quantile_intervals, modes=modes,
            accept_stats=results['accept_stats'],
            mapping_peptides=results['mapping_peptides'])
        
        # Wrap-up timing, if requested
        if timing:
            time_done = time.time()
            print >> sys.stderr, TIMING_MSG % (cfg_path, time_done-time_start)

if __name__ == '__main__':
    main(sys.argv[1:])

