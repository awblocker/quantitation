#!python

# Load libraries
import sys
import getopt
import time
import cPickle
import bz2
import gzip
import contextlib
import itertools

import h5py
import yaml
import numpy as np

import quantitation
from quantitation import mcmc_parallel

# Define constants

HELP = '''
Usage: quantitation_combine_results [options] CONFIG N_WORKERS [...]

Combines results from parallel MCMC sampler for absolute quantitation from
LC/MSMS data. This should be run only after running quantitation_mcmc_parallel.
It is not necessary after running quantitation_mcmc_serial.

Reads MCMC output from paths specified in each CONFIG. Input consists of one
file with master-process output and n_workers files with worker process output
per CONFIG file.

Writes combined MCMC output to path specified in each CONFIG file for combined
results.

Options:
  -h, --help            Show this help message and exit
  --time                Time combining process; writes timing information to
                        stderr

Details of the required format for the YAML CONFIG files can be found it further
documentation.
'''

TIMING_MSG = '''
%s
--------------------------------------------------------------------------------
Combining process used %f seconds.
'''

def main(argv):
    '''
    Main function for option-parsing and startup.
    
    Takes sys.argv[1:] as input.
    '''
    # Set default values for options
    timing = False
    
    # Parse arguments and options
    opts, args = getopt.getopt(argv, "h",
                               ["help", "time"])
    for option, value in opts:
        if option in ('-h', "--help"):
            print >> sys.stderr, HELP
            sys.exit(2)
        elif option=='--time':
            timing = True
        else:
            print >> sys.stderr, "Error -- unknown option %s" % option
            sys.exit(1)

    if len(args) > 1:
        cfg_paths = args[::2]
        list_n_workers = [int(x) for x in args[1::2]]
    else:
        print >> sys.stderr, ("Error -- need path to YAML configuration "
                              "and n_workers")
        sys.exit(1)

    # Iterate over configuration files
    for cfg_path, n_workers in itertools.izip(cfg_paths, list_n_workers):
        # Parse YAML configuration
        cfg_file = open(cfg_path, 'rb')
        cfg = yaml.load(cfg_file)
        cfg_file.close()

        # Determine type of compression used
        compress = cfg['output']['compress']

        # Check for validity of compression
        if compress not in (None, 'gzip', 'lzf', 'szip'):
            raise ValueError('Invalid value for compress.')

        # Start timing, if requested
        if timing:
            time_start = time.time()

        # Load master draws
        path_results_master = cfg['output']['path_results_master']
        result_master = h5py.File(path_results_master, 'r')

        # Load worker draws
        list_results_workers = []

        for worker in xrange(1, n_workers+1):
            path_worker = cfg['output']['pattern_results_worker'] % worker
            list_results_workers.append(h5py.File(path_worker, 'r'))

        # Combine results
        results_combined = mcmc_parallel.combine_results(result_master,
                                                         list_results_workers,
                                                         cfg)
        draws, accept_stats, mapping_peptides = results_combined

        # Write combined results to file with appropriate compression
        path_results = cfg['output']['path_results_combined']
        quantitation.write_to_hdf5(fname=path_results, compress=compress,
                                   draws=draws, accept_stats=accept_stats,
                                   mapping_peptides=mapping_peptides)
        
        # Close input files
        result_master.close()
        for f in list_results_workers:
            f.close()
        
        # Wrap-up timing, if requested
        if timing:
            time_done = time.time()
            print >> sys.stderr, TIMING_MSG % (cfg_path, time_done-time_start)

if __name__ == '__main__':
    main(sys.argv[1:])

